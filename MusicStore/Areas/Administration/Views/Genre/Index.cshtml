@model X.PagedList.IPagedList<MusicStore.ViewModels.Genre.GenreVM>
@using X.PagedList.Mvc.Core
@using X.PagedList.Mvc.Core.Common

@{
    ViewData["Title"] = "Index";
}

<h1>Genres</h1>
<hr />
<p>
    <a asp-action="Create" asp-controller="Genre" asp-route-returnUrl="@Context.Request.GetEncodedPathAndQuery()" class="btn btn-success">Add new genre</a>
</p>
<form asp-action="Index" asp-controller="Genre" method="get">
    <p>
        Search by name: @Html.TextBox("SearchString", ViewBag.CurrentFilter as string)
        <input type="submit" value="Search" class="btn btn-primary" /> |
        <a asp-action="Index" class="btn btn-outline-secondary">Clear search</a>
    </p>
</form>
<div>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>
                    <a asp-action="Index" asp-controller="Genre" asp-route-sortOrder=@ViewBag.NameSortParm asp-route-currentFilter=@ViewBag.CurrentFilter>@Html.DisplayNameFor(model => model.FirstOrDefault().Name)</a>                    
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @item.Name
                    </td>
                    <td>
                        <div class="d-flex">
                            <a asp-action="Edit" asp-controller="Genre" asp-route-genreId="@item.GenreId" asp-route-returnUrl="@Context.Request.GetEncodedPathAndQuery()" class="btn btn-warning">Edit</a>
                            <form asp-action="Delete" asp-controller="Genre" asp-route-genreId="@item.GenreId" asp-route-returnUrl="@Context.Request.GetEncodedPathAndQuery()" method="post">
                                <input type="submit" onclick="return confirm('Are you sure you want to delete this genre?')" value="Delete" class="btn btn-danger">
                            </form>
                        </div>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
<div class="mt-3">
    Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) of @Model.PageCount

    @Html.PagedListPager(Model, page => Url.Action("Index",
     new { page, sortOrder = ViewBag.CurrentSort, currentFilter = ViewBag.CurrentFilter }),
     new PagedListRenderOptions
     {
         LiElementClasses = new string[] { "page-item" },
         PageClasses = new string[] { "page-link" }
     })
</div>
